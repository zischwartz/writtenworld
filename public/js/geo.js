// Generated by CoffeeScript 1.3.1
(function() {
  var geoFailed, geoHasPosition, geoSucceeded,
    __hasProp = {}.hasOwnProperty;

  window.initializeGeo = function() {
    var watchID;
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(geoSucceeded, geoFailed);
      $.doTimeout(500, function() {
        if ((!state.geoPos) || (state.geoAccuracy === -1)) {
          window.insertMessage("Click Allow", "If your browser asks to track your location, please click <b>allow</b>.", 'alert-error');
        }
        return false;
      });
      watchID = navigator.geolocation.watchPosition(function(position) {
        var timeSinceLoad;
        if (position.coords.accuracy < 500) {
          timeSinceLoad = new Date().getTime() - window.pageStartLoad;
          if (!state.geoPos && (timeSinceLoad > 1500)) {
            window.insertMessage("We found you", "It took a second, but we've found your location more accurately. Moving you there shortly.", 'alert-info');
            $.doTimeout(1000, geoHasPosition(position));
          } else {
            geoHasPosition(position);
          }
          return navigator.geolocation.clearWatch(watchID);
        }
      });
    }
    if (!state.geoPos) {
      return $.getScript('http://j.maxmind.com/app/geoip.js', function(data, textStatus) {
        if (!state.geoPos) {
          geoHasPosition({
            coords: {
              latitude: geoip_latitude(),
              longitude: geoip_longitude(),
              accuracy: -1
            }
          });
        }
        return true;
      });
    }
  };

  geoFailed = function(error) {
    return true;
  };

  geoSucceeded = function(position) {
    if (!state.geoPos) {
      geoHasPosition(position);
    }
    return true;
  };

  geoHasPosition = function(position) {
    var closest, distance, distanceToClosest, inOfficialCity, key, linkPos, msgbody, p, val;
    linkPos = config.initialPos();
    if (linkPos) {
      state.isLocal = false;
      p = new L.LatLng(linkPos.x, linkPos.y);
      state.geoPos = p;
      state.initialGeoPos = new L.LatLng(linkPos.x, linkPos.y);
      map.setView(p, config.defZoom());
      return true;
    }
    inOfficialCity = false;
    closest = '';
    distanceToClosest = 10000000000000000000000000000000;
    p = new L.LatLng(position.coords.latitude, position.coords.longitude);
    state.geoPos = p;
    state.geoAccuracy = position.coords.accuracy;
    if (window.VARYLATLNG && position.coords.accuracy > 2000 || position.coords.accuracy === -1) {
      p = varyLatLng(p);
    }
    state.geoPos = p;
    state.initialGeoPos = new L.LatLng(p.lat, p.lng);
    for (key in officialCities) {
      if (!__hasProp.call(officialCities, key)) continue;
      val = officialCities[key];
      distance = p.distanceTo(val);
      if (distance < config.maxDistanceFromOfficial()) {
        inOfficialCity = true;
      }
      if (distance < distanceToClosest) {
        distanceToClosest = distance;
        closest = key;
      }
    }
    if (inOfficialCity) {
      map.setView(p, config.defZoom());
      window.centerCursor();
      state.isLocal = true;
    } else {
      if (window.VARYLATLNG) {
        map.setView(varyLatLng(officialCities[closest]), config.defZoom());
      } else {
        map.setView(officialCities[closest], config.defZoom());
      }
      msgbody = "We're in beta, so we're concentrating on a few cities for now. We took you to <b>" + closest + "</b>.<br><br>Want a head start writing on your actual location? It may be kinda empty. <br><br><a href='#' class='goToActualPos btn btn-primary' data-dismiss='alert'>Go to your location</a> <a href='#' class='btn' data-dismiss='alert'>Stay</a>";
      window.clearMessages();
      window.insertMessage("&quotHey, That's Not Where I Am!&quot", msgbody, 'alert-info', 45);
      state.isLocal = false;
    }
    return true;
  };

  $('.goToActualPos').live('click', function() {
    map.setView(state.geoPos, config.defZoom());
    state.isLocal = true;
    window.centerCursor();
    return true;
  });

  window.varyLatLng = function(l) {
    var latOffset, lngOffset, p;
    latOffset = Math.random() / 100;
    lngOffset = Math.random() / 100;
    if (Math.random() > 0.5) {
      latOffset = 0 - latOffset;
    }
    if (Math.random() > 0.5) {
      lngOffset = 0 - lngOffset;
    }
    p = new L.LatLng(l.lat + latOffset, l.lng + lngOffset);
    return p;
  };

}).call(this);
